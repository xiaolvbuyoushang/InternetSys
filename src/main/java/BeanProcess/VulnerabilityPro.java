package BeanProcess;

import DatabaseConnect.ConnectDB;
import model.Vulnerability;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityPro {

    // 数据库连接对象
    private Connection connection = null;

    public VulnerabilityPro() {
        // 初始化数据库连接
        connection = new ConnectDB().getConn();
        if (connection == null) {
            System.err.println("Database connection is null in VulnerabilityPro constructor.");
        } else {
            System.out.println("Database connection established in VulnerabilityPro constructor.");
        }
    }

    /**
     * 获取所有审核通过的漏洞
     *
     * @return 审核通过的漏洞列表
     */
    public List<Vulnerability> getApprovedVulnerabilities() {
        if (connection == null) {
            System.err.println("Database connection is null in getApprovedVulnerabilities method.");
            return new ArrayList<>();
        }
        String sql = "SELECT * FROM taskone WHERE status = 1";
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = connection.prepareStatement(sql);
            if (ps == null) {
                System.err.println("PreparedStatement is null in getApprovedVulnerabilities method.");
                return new ArrayList<>();
            }
            System.out.println("Executing SQL: " + sql); // 添加日志输出
            rs = ps.executeQuery();
            List<Vulnerability> vulnerabilities = new ArrayList<>();
            while (rs.next()) {
                Vulnerability vulnerability = new Vulnerability();
                vulnerability.setTaskid(rs.getString("taskid"));
                vulnerability.setTasktype(rs.getString("tasktype"));
                vulnerability.setAssigndate(rs.getTimestamp("assigndate"));
                vulnerability.setStatus(rs.getString("status"));
                vulnerability.setAuditcomment(rs.getString("auditcomment"));
                vulnerability.setContent(rs.getString("content"));
                vulnerabilities.add(vulnerability);
            }
            return vulnerabilities;
        } catch (SQLException e) {
            e.printStackTrace();
            return new ArrayList<>();
        } finally {
            closeResources(ps, rs, null);
        }
    }

    /**
     * 关闭数据库资源（结果集、连接、预编译语句）的方法
     */
    private void closeResources(PreparedStatement ps, ResultSet rs, Connection connection) {
        if (rs != null) {
            try {
                rs.close();
                rs = null;
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (ps != null) {
            try {
                ps.close();
                ps = null;
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (connection != null) {
            try {
                connection.close();
                connection = null;
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
